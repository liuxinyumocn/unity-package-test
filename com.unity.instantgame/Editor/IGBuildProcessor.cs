#if IG_C111 || IG_C301 // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEditor.UnityLinker;
using UnityEngine;
using UnityEngine.Rendering;
using Unity.AutoStreaming;
using System.Linq;

namespace Unity.InstantGame
{
    internal class IGBuildConstants
    {
        internal const string k_OutputDir = "IGOutput";
        internal const string k_IGJsonFileName = ".unity_instantgame_meta";
        internal const string k_ApkName = "Ig.apk";
    }

    class IGBuildPostprocessor : IPostprocessBuildWithReport
    {
        public int callbackOrder { get { return ASBuildConstants.k_CallbackOrder + 1; } }


        internal static string s_EngineName = "2019";

        internal static string sSubVersion = "c101";

        internal const string k_FirstDir = IGBuildConstants.k_OutputDir + "/first";
        internal const string k_GameMainDir = IGBuildConstants.k_OutputDir + "/defer_game_main";

        // TODOVZ: Revisit to see if they should be static.
        static string s_ScriptingBackend = "mono";
        static string s_OutputPath = string.Empty;

        public void OnPostprocessBuild(BuildReport report)
        {
            if (!report.summary.options.HasFlag(BuildOptions.EnableInstantGame))
                return;
            s_OutputPath = report.summary.outputPath;

            if (!File.Exists(s_OutputPath))
                return;

            if (report.summary.platform == BuildTarget.Android && s_OutputPath.EndsWith(".apk"))
            {
                s_ScriptingBackend = PlayerSettings.GetScriptingBackend(BuildTargetGroup.Android) == ScriptingImplementation.IL2CPP ? "il2cpp" : "mono";
                sSubVersion = Application.unityVersion.Substring(Application.unityVersion.IndexOf('c'));
                s_EngineName = Application.unityVersion.Substring(0, 4);

                MoveSymbolsZip();
                ASBuildPostprocessor.NewCleanDirectory(IGBuildConstants.k_OutputDir, s_OutputPath, new HashSet<string> { "first" });
                FileUtilities.UnZipFile(s_OutputPath, k_GameMainDir);

                if (CheckIfContainsChineseFileName(k_GameMainDir))
                {
                    Debug.LogError("Found file(s) with Chinese name, abort!");
                    return;
                }

                GenerateIGAndroidOutFile();
                GenerateIconFile();

                File.Delete(s_OutputPath);
            }
        }

        private static bool CheckIfContainsChineseFileName(string directory)
        {
            var allFiles = Directory.GetFiles(directory, "*", SearchOption.AllDirectories);
            var allFilesWithChineseName = allFiles.Where(filename => FileUtilities.ContainChinese(filename));
            if (!allFilesWithChineseName.Any())
            {
                return false;
            }

            foreach (var filename in allFilesWithChineseName.Take(5))
            {
                Debug.LogError($"Chinese filename is not allowed since it causes runtime error, file: {filename}");
            }
            return true;
        }

        private static void MoveSymbolsZip()
        {
            DirectoryInfo di = new DirectoryInfo(IGBuildConstants.k_OutputDir);
            foreach (FileInfo file in di.GetFiles())
            {
                if (file.FullName.EndsWith("symbols.zip"))
                {
                    string dstPath = Path.Combine(IGBuildConstants.k_OutputDir + "/..", file.Name);
                    if (File.Exists(dstPath))
                        File.Delete(dstPath);

                    File.Move(file.FullName, Path.Combine(IGBuildConstants.k_OutputDir + "/..", file.Name));
                }
            }
        }

        private static void GenerateIGAndroidOutFile()
        {
            PrepareFirstDir();
            PrepareResDir();

            if ((PlayerSettings.Android.targetArchitectures & AndroidArchitecture.ARM64) == AndroidArchitecture.ARM64)
            {
                //do not change the call order
                PrepareEngineDir("arm64-v8a");
                PrepareGameLibDir("arm64-v8a");
            }

            if ((PlayerSettings.Android.targetArchitectures & AndroidArchitecture.ARMv7) == AndroidArchitecture.ARMv7)
            {
                //do not change the call order
                PrepareEngineDir("armeabi-v7a");
                PrepareGameLibDir("armeabi-v7a");
            }

            PrepareGameMainDir(); // must prepare last

            ProcessDeferFiles();

            var bundles = new List<IGBundle>();
            GenerateBundleIfNeeded("first", bundles, IGBundleType.Game);
            GenerateBundleIfNeeded("game_res", bundles, IGBundleType.GameRes);
            GenerateBundleIfNeeded("gamelibs_arm64-v8a", bundles, IGBundleType.GameLib, "arm64-v8a");
            GenerateBundleIfNeeded("gamelibs_armeabi-v7a", bundles, IGBundleType.GameLib, "armeabi-v7a");

            if (EditorUserBuildSettings.development || !ShareEngineBundleIfPossible("engine_arm64-v8a", bundles))
            {
                GenerateBundleIfNeeded("engine_arm64-v8a", bundles, IGBundleType.Engine, "arm64-v8a");
            }

            if (EditorUserBuildSettings.development || !ShareEngineBundleIfPossible("engine_armeabi-v7a", bundles))
            {
                GenerateBundleIfNeeded("engine_armeabi-v7a", bundles, IGBundleType.Engine, "armeabi-v7a");
            }

            //generate json file for Unity

            var igUnity = new IGUnity();
            igUnity.jsonversion = "1.0.0";   // temporally hard code
            igUnity.uniqueName = PlayerSettings.applicationIdentifier;
            igUnity.displayName = PlayerSettings.productName;
            igUnity.iconUrl = ASUOSHelper.AutoStreamingPath + "/icon.png";   //default name:  icon.png

            igUnity.bundles = bundles.ToArray();

            string outStr = JsonUtility.ToJson(igUnity, true);
            File.WriteAllText(IGBuildConstants.k_OutputDir + "/" + IGBuildConstants.k_IGJsonFileName, outStr);

            switch (ASUOSHelper.TargetPlatform)
            {
                case "Kwai":
                    //generate json file for kuaishou
                    var igKuaiShou = new IGKuaiShou(igUnity);
                    outStr = JsonUtility.ToJson(igKuaiShou, true);
                    File.WriteAllText(IGBuildConstants.k_OutputDir + "/ig_kwai.json", outStr);

                    break;

                case "Mobile QQ":
                    //generate json file for shouQ
                    var igShouQ = new IGShouQ(igUnity);
                    outStr = JsonUtility.ToJson(igShouQ, true);
                    File.WriteAllText(IGBuildConstants.k_OutputDir + "/ig_mobileqq.json", outStr);
                    break;

                case "Bytedance":
                    //generate json file for bytedance
                    var igByteDance = new IGByteDance();
                    igByteDance.min_sdk_version = "3.11.0";
                    igByteDance.bundles = bundles.ToArray();

                    //shorten engine_folder, e.g. 2019_il2cpp_IG_C106 || IG_C109_OR_NEWER_s to i_IG_C106 || IG_C109_OR_NEWER_s
                    foreach (var bundle in igByteDance.bundles)
                    {
                        if (bundle.filename.StartsWith("engine_"))
                        {
                            if (bundle.engine_folder.StartsWith("20") && bundle.engine_folder.Length > 5)
                            {
                                //Remove 2019_/ 2020_/ 2021_
                                bundle.engine_folder = bundle.engine_folder.Substring(5);

                                if (bundle.engine_folder.Contains("il2cpp"))
                                {
                                    bundle.engine_folder = bundle.engine_folder.Replace("il2cpp", "i");
                                }

                                if (bundle.engine_folder.Contains("mono"))
                                {
                                    bundle.engine_folder = bundle.engine_folder.Replace("mono", "m");
                                }
                            }
                        }
                    }

                    outStr = JsonUtility.ToJson(igByteDance, true);
                    File.WriteAllText(IGBuildConstants.k_OutputDir + "/ig_bytedance.json", outStr);
                    break;
            }
        }

        private static void PrepareFirstDir()
        {
            string[] filesInFirst = new string[]
            {
                "/assets/bin/Data/boot.config",
                "/assets/bin/Data/RuntimeInitializeOnLoads.json",
                "/assets/bin/Data/ScriptingAssemblies.json",
            };

            foreach (var fileInFirst in filesInFirst)
            {
                if (File.Exists(k_GameMainDir + fileInFirst))
                {
                    var dstPath = k_FirstDir + fileInFirst;
                    var dstDir = Path.GetDirectoryName(dstPath);
                    Directory.CreateDirectory(dstDir);

                    File.Move(k_GameMainDir + fileInFirst, k_FirstDir + fileInFirst);
                }
            }

            string[] dexFiles = Directory.GetFiles(k_GameMainDir, "*.dex");
            foreach (var dexFile in dexFiles)
            {
                var dexFileName = Path.GetFileName(dexFile);
                File.Move(Path.Combine(k_GameMainDir, dexFileName), Path.Combine(k_FirstDir, dexFileName));
            }

            string androidManifestFileName = "AndroidManifest.xml";
            File.Move(Path.Combine(k_GameMainDir, androidManifestFileName), Path.Combine(k_FirstDir, androidManifestFileName));
        }

        private static void ProcessDeferFiles()
        {
            if (!ASConfigUI.GetDownloadInSplashScreen())
                return;

            List<string> deferInfo = new List<string>();

            Guid verGuid = Guid.NewGuid();
            deferInfo.Add("GUID");
            deferInfo.Add(verGuid.ToString());

            // defer_gamelibs
            List<string> deferGamelibsNames = new List<string>
            {
                "defer_gamelibs_arm64-v8a",
                "defer_gamelibs_armeabi-v7a"
            };
            for (int i = 0; i < deferGamelibsNames.Count; ++i)
            {
                var deferGamelibsName = deferGamelibsNames[i];
                deferInfo.Add(deferGamelibsName);
                var deferFolderDir = Path.Combine(IGBuildConstants.k_OutputDir, deferGamelibsName);
                DirectoryInfo di = new DirectoryInfo(deferFolderDir);
                int soFileCount = 0;
                int placeholderIdx = deferInfo.Count;
                deferInfo.Add("placeholder");
                if (di.Exists)
                {
                    foreach (FileInfo file in di.GetFiles())
                    {
                        if (file.Name.EndsWith(".so", StringComparison.OrdinalIgnoreCase))
                        {
                            deferInfo.Add(file.Name);
                            ++soFileCount;
                        }
                    }
                }
                deferInfo[placeholderIdx] = soFileCount.ToString();
            }

            List<string> deferFolderNames = new List<string>
            {
                "defer_game_main",
                "defer_game_res",
                "defer_gamelibs_arm64-v8a",
                "defer_gamelibs_armeabi-v7a"
            };
            foreach (var deferFolderName in deferFolderNames)
            {
                var deferFolderDir = Path.Combine(IGBuildConstants.k_OutputDir, deferFolderName);
                var deferFileName = deferFolderName + ".zip";
                long deferFileLength = 0;
                if (Directory.Exists(deferFolderDir))
                {
                    var deferFilePath = Path.Combine(IGBuildConstants.k_OutputDir, deferFileName);
                    FileUtilities.ZipFile(deferFolderDir, deferFilePath);
                    Directory.Delete(deferFolderDir, true);
                    deferFileLength = new FileInfo(deferFilePath).Length;
                }

                deferInfo.Add(deferFileName);
                deferInfo.Add(deferFileLength.ToString());
            }

            File.WriteAllText(k_FirstDir + "/assets/bin/Data/defer.info", string.Join("\n", deferInfo));
        }

        private static void PrepareResDir()
        {
            string resDir = IGBuildConstants.k_OutputDir + "/game_res";
            ASBuildPostprocessor.NewCleanDirectory(resDir, s_OutputPath);
            string deferResDir = IGBuildConstants.k_OutputDir + "/defer_game_res";
            if (ASConfigUI.GetDownloadInSplashScreen())
                ASBuildPostprocessor.NewCleanDirectory(deferResDir, s_OutputPath);

            if (File.Exists(k_GameMainDir + "/assets/bin/Data/data.unity3d"))
            {
                if (ASConfigUI.GetDownloadInSplashScreen())
                {
                    File.Move(k_GameMainDir + "/assets/bin/Data/data.unity3d", deferResDir + "/data.unity3d");
                }
                else
                    File.Move(k_GameMainDir + "/assets/bin/Data/data.unity3d", resDir + "/data.unity3d");
            }
        }

        private static void PrepareEngineDir(string abiStr)
        {
            string engineDir = IGBuildConstants.k_OutputDir + "/engine_" + abiStr;
            ASBuildPostprocessor.NewCleanDirectory(engineDir, s_OutputPath);

            string srcDir = k_GameMainDir + "/lib/" + abiStr;

            if (File.Exists(srcDir + "/libmain.so"))
                File.Move(srcDir + "/libmain.so", engineDir + "/libmain.so");

            if (File.Exists(srcDir + "/libMonoPosixHelper.so"))
                File.Move(srcDir + "/libMonoPosixHelper.so", engineDir + "/libMonoPosixHelper.so");

            if (File.Exists(srcDir + "/libmonobdwgc-2.0.so"))
                File.Move(srcDir + "/libmonobdwgc-2.0.so", engineDir + "/libmonobdwgc-2.0.so");

            if (File.Exists(srcDir + "/libunity.so") && !(s_ScriptingBackend.Equals("il2cpp") && PlayerSettings.stripEngineCode))
                File.Move(srcDir + "/libunity.so", engineDir + "/libunity.so");

            if (File.Exists(k_GameMainDir + "/assets/bin/Data/unity default resources"))
                File.Copy(k_GameMainDir + "/assets/bin/Data/unity default resources", engineDir + "/unity default resources");
        }

        private static void PrepareGameLibDir(string abiStr)
        {
            string gamelibDir = IGBuildConstants.k_OutputDir + "/gamelibs_" + abiStr;
            ASBuildPostprocessor.NewCleanDirectory(gamelibDir, s_OutputPath);

            string deferGamelibDir = IGBuildConstants.k_OutputDir + "/defer_gamelibs_" + abiStr;
            if (ASConfigUI.GetDownloadInSplashScreen())
                ASBuildPostprocessor.NewCleanDirectory(deferGamelibDir, s_OutputPath);

            string srcDir = k_GameMainDir + "/lib/" + abiStr;
            var dirInfo = new DirectoryInfo(srcDir);
            if (!dirInfo.Exists)
                return;

            foreach (FileInfo file in dirInfo.GetFiles())
            {
                if (!ASConfigUI.GetDownloadInSplashScreen() || file.Name.EndsWith("libunity.so"))
                    File.Move(srcDir + "/" + file.Name, gamelibDir + "/" + file.Name);
                else
                {
                    File.Move(srcDir + "/" + file.Name, deferGamelibDir + "/" + file.Name);
                }
            }
        }

        private static void PrepareGameMainDir()
        {
            File.Delete(k_GameMainDir + "/assets/bin/Data/data.unity3d");
            File.Delete(k_GameMainDir + "/assets/bin/Data/unity default resources");

            //File.Delete(tempDir + "/AndroidManifest.xml");
            File.Delete(k_GameMainDir + "/resources.arsc");

            if (Directory.Exists(k_GameMainDir + "/res"))
            {
                Directory.Delete(k_GameMainDir + "/res", true);
            }
            if (Directory.Exists(k_GameMainDir + "/lib"))
            {
                Directory.Delete(k_GameMainDir + "/lib", true);
            }
            if (Directory.Exists(k_GameMainDir + "/META-INF"))
            {
                Directory.Delete(k_GameMainDir + "/META-INF", true);
            }

            if (!ASConfigUI.GetDownloadInSplashScreen())
            {
                MoveFiles(k_GameMainDir, k_FirstDir);
                Directory.Delete(k_GameMainDir, true);
            }
        }

        private static void GenerateBundleIfNeeded(string bundleName, List<IGBundle> bundles, IGBundleType type, string abiStr = "")
        {
            if (!Directory.Exists(IGBuildConstants.k_OutputDir + "/" + bundleName))
                return;

            FileUtilities.ZipFile(IGBuildConstants.k_OutputDir + "/" + bundleName, IGBuildConstants.k_OutputDir + "/" + bundleName + ".zip");

            var bundle = new IGBundle();
            var items = new List<IGBundleItem>();
            bundle.filename = bundleName + ".zip";
            bundle.download_link = ASUOSHelper.AutoStreamingPath + "/" + bundle.filename;
            bundle.size = new FileInfo(IGBuildConstants.k_OutputDir + "/" + bundle.filename).Length;
            bundle.md5 = FileUtilities.GenerateMD5FromFile(IGBuildConstants.k_OutputDir + "/" + bundle.filename);
            switch (type)
            {
                case IGBundleType.Game:
                    bundle.parent_dir_type = "PACKAGE";
                    bundle.keep_after_unzip = true;
                    bundle.is_main_resource = true;
                    break;

                case IGBundleType.GameRes:
                    bundle.parent_dir_type = "PACKAGE";

                    ProcessItem(IGBuildConstants.k_OutputDir + "/" + bundleName, items, "PACKAGE");
                    bundle.unzip_files = items.ToArray();

                    break;

                case IGBundleType.GameLib:
                    bundle.parent_dir_type = "PACKAGE";
                    bundle.abi = abiStr;

                    ProcessItem(IGBuildConstants.k_OutputDir + "/" + bundleName, items, "PACKAGE", "sos");
                    bundle.unzip_files = items.ToArray();
                    break;

                case IGBundleType.Engine:
                    bundle.engine_folder = s_EngineName + "_" + s_ScriptingBackend + "_" + sSubVersion + ((s_ScriptingBackend.Equals("il2cpp") && PlayerSettings.stripEngineCode) ? "_s" : "");
                    bundle.parent_dir_type = "INTERNAL_FILES";
                    bundle.abi = abiStr;

                    ProcessItem(IGBuildConstants.k_OutputDir + "/" + bundleName, items, "LIBRARY");
                    bundle.unzip_files = items.ToArray();

                    string outStr = JsonUtility.ToJson(bundle, true);
                    // e.g. 2019_mono_a8_engine_arm64-v8a.json
                    if (!EditorUserBuildSettings.development)
                    {
                        File.WriteAllText(IGBuildConstants.k_OutputDir + "/" + bundle.engine_folder + "_" + bundleName + ".json", outStr);
                    }
                    break;
            }

            bundles.Add(bundle);
            Directory.Delete(IGBuildConstants.k_OutputDir + "/" + bundleName, true);
        }

        private static void ProcessItem(string dirPath, List<IGBundleItem> items, string dir_type, string subDir = "")
        {
            if (!Directory.Exists(dirPath))
                return;

            DirectoryInfo di = new DirectoryInfo(dirPath);
            foreach (FileInfo file in di.GetFiles())
            {
                var item = new IGBundleItem();
                item.filename = file.Name;
                item.parent_dir_type = dir_type;
                item.sub_dir = subDir;
                item.md5 = FileUtilities.GenerateMD5FromFile(file.FullName);
                items.Add(item);
            }

            foreach (DirectoryInfo dir in di.GetDirectories())
            {
                ProcessItem(dir.FullName, items, dir_type, string.IsNullOrEmpty(subDir) ? dir.Name : subDir + "/" + dir.Name);
            }
        }

        private static bool ShareEngineBundleIfPossible(string bundleName, List<IGBundle> bundles)
        {
            string engineDir = EditorApplication.applicationContentsPath + "/InstantGame";
            if (Directory.Exists(IGBuildConstants.k_OutputDir + "/" + bundleName))
            {
                // e.g. 2019_mono_a8_engine_arm64-v8a.json
                string jsonName = s_EngineName + "_" + s_ScriptingBackend + "_" + sSubVersion + ((s_ScriptingBackend.Equals("il2cpp") && PlayerSettings.stripEngineCode) ? "_s" : "")  + "_" + bundleName + ".json";
                if (File.Exists(engineDir + "/" + jsonName))
                {
                    Directory.Delete(IGBuildConstants.k_OutputDir + "/" + bundleName, true);
                    string engineStr = File.ReadAllText(engineDir + "/" + jsonName);
                    var bundle = JsonUtility.FromJson<IGBundle>(engineStr);

                    bundles.Add(bundle);
                    return true;
                }
                return false;
            }
            return true;
        }

        //generate icon.png
        private static void GenerateIconFile()
        {
            //get icon
            var icons = PlayerSettings.GetIconsForTargetGroup(BuildTargetGroup.Unknown);
            if (icons.Length == 0)
            {
                icons = PlayerSettings.GetIconsForTargetGroup(BuildTargetGroup.Android);
                if (icons.Length == 0)
                {
                    Debug.Log("All icon settings are Empty, icon.png will not be generated!");
                    return;
                }
            }

            try
            {
                //icons[0] is  not readable, create iconReadable to make it readalbe
                Texture2D iconReadable = new Texture2D(icons[0].width, icons[0].height, icons[0].format, false);
                iconReadable.LoadRawTextureData(icons[0].GetRawTextureData());
                iconReadable.Apply();

                //create iconMimap to generate mimap
                Texture2D iconMimap = new Texture2D(iconReadable.width, iconReadable.height);
                iconMimap.SetPixels(iconReadable.GetPixels());
                iconMimap.Apply();

                //scale icon width & height in 128 - 256
                int size = Mathf.Min(iconMimap.width, iconMimap.height);
                size = Mathf.NextPowerOfTwo(size) / 256;
                size = size > 1 ? size : 1;
                int mipLevel = 0;
                while (size >> mipLevel > 1)
                {
                    mipLevel++;
                }

                mipLevel = Mathf.Min(mipLevel, iconMimap.mipmapCount - 1);
                Texture2D iconScaled = new Texture2D(iconMimap.width / size, iconMimap.height / size);
                iconScaled.SetPixels(iconMimap.GetPixels(mipLevel));
                iconScaled.Apply();

                byte[] bytes = iconScaled.EncodeToPNG();
                File.WriteAllBytes(IGBuildConstants.k_OutputDir + "/icon.png", bytes);
            }
            catch
            {
                Debug.LogWarning("InstantGame: Project icon not found, icon.png will not be generated!");
            }
        }

        public static void MoveFiles(string sourceFolder, string destFolder)
        {
            if (!Directory.Exists(destFolder))
                Directory.CreateDirectory(destFolder);

            // Get Files & Copy
            string[] files = Directory.GetFiles(sourceFolder);
            foreach (string file in files)
            {
                string name = Path.GetFileName(file);

                // ADD Unique File Name Check to Below!!!!
                string dest = Path.Combine(destFolder, name);
                File.Move(file, dest);
            }

            // Get dirs recursively and copy files
            string[] folders = Directory.GetDirectories(sourceFolder);
            foreach (string folder in folders)
            {
                string name = Path.GetFileName(folder);
                string dest = Path.Combine(destFolder, name);
                MoveFiles(folder, dest);
            }
        }
    }
}

#endif  // IG_C111 || IG_C301, Auto generated by AddMacroForInstantGameFiles.exe
