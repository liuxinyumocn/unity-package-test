#if IG_C111 || IG_C301 // Auto generated by AddMacroForInstantGameFiles.exe

using System;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEditor.Build.Content;
using UnityEditor.Build.Reporting;
using UnityEngine;
using Unity.AutoStreaming;

namespace Unity.InstantGame
{
    public class IGBuildPipeline
    {
        public static void RegisterBuildPlayerHandler(Action<BuildPlayerOptions> func)
        {
            IGConfigUIExtension.RegisterBuildPlayerHandler(func);
        }

        public static BuildReport BuildPlayer(BuildPlayerOptions buildPlayerOptions)
        {
            HashSet<string> streamingScenes = new HashSet<string>();
            var autoScenes = AutoStreamingSettings.scenes;
            foreach (var scene in autoScenes)
            {
                if (scene.onDemandDownload)
                    streamingScenes.Add(scene.assetPath);
            }

            string sceneABPath = ASUtilities.GetPlatformSpecificResourcePath(ASBuildConstants.k_SceneABPath);

            if (!Directory.Exists(sceneABPath) || Directory.GetFiles(sceneABPath).Length == 0)
            {
                throw new InvalidOperationException("Please click Generate ABs in scene streaming panel before building instantgame even no scene scelected.");
            }

            HashSet<string> scenesInOption = new HashSet<string>(buildPlayerOptions.scenes);
            scenesInOption.ExceptWith(streamingScenes);
            string[] sceneToBuild = new string[scenesInOption.Count];
            scenesInOption.CopyTo(sceneToBuild);
            buildPlayerOptions.scenes = sceneToBuild;

            buildPlayerOptions.options |= BuildOptions.EnableInstantGame;
#if UNITY_ANDROID
            if (EditorUserBuildSettings.exportAsGoogleAndroidProject)
            {
                throw new InvalidOperationException("Instantgame do not support export project, please disable it.");
            }

            Sprite splashBg1 = null;
            Sprite splashBg2 = null;


            if (ASConfigUI.GetDownloadInSplashScreen())
            {
                #if !IG_C302
                ContentBuildInterface.BuildSplashSettings();
                #endif
                // Clear splash settings
                splashBg1 = PlayerSettings.SplashScreen.background;
                splashBg2 = PlayerSettings.SplashScreen.backgroundPortrait;
                PlayerSettings.SplashScreen.background = null;
                PlayerSettings.SplashScreen.backgroundPortrait = null;
            }

            buildPlayerOptions.target = BuildTarget.Android;

            if (string.IsNullOrEmpty(buildPlayerOptions.locationPathName) || !buildPlayerOptions.locationPathName.EndsWith(".apk"))
            {
                if (!Directory.Exists(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir))
                    Directory.CreateDirectory(Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir);

                var tempApkPath = Path.GetDirectoryName(Application.dataPath) + "/" + IGBuildConstants.k_OutputDir + "/" + IGBuildConstants.k_ApkName;
                buildPlayerOptions.locationPathName = tempApkPath;
            }

            //set compresion method to LZ4HC
            EditorUserBuildSettings.SetCompressionType(BuildTargetGroup.Android, Compression.Lz4HC);
#endif //UNITY_ANDROID
            BuildReport report = null;
            try
            {
                report = BuildPipeline.BuildPlayer(buildPlayerOptions);
            }
            catch (Exception e)
            {
                if (!string.IsNullOrEmpty(e.Message))
                    Debug.LogError(e);
            }
            finally
            {
#if UNITY_ANDROID
                if (ASConfigUI.GetDownloadInSplashScreen())
                {
                    // Restore splash settings
                    PlayerSettings.SplashScreen.background = splashBg1;
                    PlayerSettings.SplashScreen.backgroundPortrait = splashBg2;
                }
#endif
            }
            return report;
        }

        public static BuildReport BuildPlayer(EditorBuildSettingsScene[] levels, string locationPathName, BuildTarget target, BuildOptions options)
        {
            BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions();
            buildPlayerOptions.scenes = EditorBuildSettingsScene.GetActiveSceneList(levels);
            buildPlayerOptions.locationPathName = locationPathName;
            buildPlayerOptions.target = target;
            buildPlayerOptions.options = options;
            return BuildPlayer(buildPlayerOptions);
        }

        public static BuildReport BuildPlayer(string[] levels, string locationPathName, BuildTarget target, BuildOptions options)
        {
            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(target);
            BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions();
            buildPlayerOptions.scenes = levels;
            buildPlayerOptions.locationPathName = locationPathName;
            buildPlayerOptions.targetGroup = buildTargetGroup;
            buildPlayerOptions.target = target;
            buildPlayerOptions.options = options;
            return BuildPlayer(buildPlayerOptions);
        }
    }
}

#endif  // IG_C111 || IG_C301, Auto generated by AddMacroForInstantGameFiles.exe
